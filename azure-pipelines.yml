# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Pipeline
#     Stage A
#         Job 1
#             Step 1.1

name: 'Master CI/CD'

trigger:
  paths:
    exclude:
    - docs/*
    - README.md
    - LICENSE

pool:
  vmImage: 'ubuntu-latest'

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '0fd848f2-70dd-4f38-a3aa-fd52c45e2423'
  imageRepository: 'georgeracuesrsbackend'
  containerRegistry: 'esrsproject.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'esrsproject212494a2-auth'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: 'Build and test with coverage'
    jobs:
    - job: 'Test'
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'PullRequest'))
      pool:
        vmImage: 'ubuntu-16.04'
      strategy:
        matrix:
          Python37:
            python.version: '3.7'
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python $(python.version)'
        inputs:
          versionSpec: '$(python.version)'
      - script: |
          python -m venv antenv
          source antenv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements/test-requirements.txt
        displayName: "Install requirements"
      - script: |
          python -m pip install flake8
          flake8 app
        displayName: "Run linter"
      - script: |
          pip install -r requirements/test-requirements.txt
          pytest test --junitxml=junit/test-results.xml --cov=app --cov-report=xml --cov-report=html
        displayName: "Tests with pytest"
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: 'junit/test-results.xml'
          testRunTitle: 'Publish test results for Python $(python.version)'
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

  - stage: Docker
    displayName: Build stage
    jobs:  
    - job: Build
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      displayName: Build Docker image
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: Docker@2
        displayName: Build and push Docker image to container registry
        inputs:
          command: buildAndPush
          repository: $(imageRepository)
          dockerfile: $(dockerfilePath)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(tag)
            
      - publish: manifests
        artifact: manifests
    
  - stage: Deploy
    displayName: Deploy to Kubernetes
    dependsOn: Build
  
    jobs:
    - deployment: Deploy
      displayName: Deploy Docker image
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      pool:
        vmImage: $(vmImageName)
      environment: 'georgeracuesrsbackend-1323.default'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: KubernetesManifest@0
              displayName: Create imagePullSecret
              inputs:
                action: createSecret
                secretName: $(imagePullSecret)
                dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
                
            - task: KubernetesManifest@0
              displayName: Deploy to Kubernetes cluster
              inputs:
                action: deploy
                manifests: |
                  $(Pipeline.Workspace)/manifests/deployment.yml
                  $(Pipeline.Workspace)/manifests/service.yml
                imagePullSecrets: |
                  $(imagePullSecret)
                containers: |
                  $(containerRegistry)/$(imageRepository):$(tag)